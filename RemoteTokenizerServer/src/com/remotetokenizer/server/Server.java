/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.remotetokenizer.server;

import com.remotetokenizer.models.User;
import com.remotetokenizer.providers.Tokenizer;
import com.remotetokenizer.providers.XMLStream;
import com.remotetokenizer.contracts.IAuthentication;
import com.remotetokenizer.contracts.IRegister;
import com.remotetokenizer.contracts.IRetriever;
import com.remotetokenizer.contracts.ITokenizer;
import com.remotetokenizer.models.Token;
import com.remotetokenizer.providers.WriteMode;
import java.awt.event.ItemEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.NoSuchObjectException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import com.remotetokenizer.contracts.INotification;
import java.util.Date;

/**
 *
 * @author Georgi Spasov
 */
public class Server extends javax.swing.JFrame {

    private Registry registry;
    private final Map<UUID, User> logedUsers;
    private final Map<UUID, INotification> userConnections;
    private String userXMLLocation;
    private String tokensXMLLocation;

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        logedUsers = new ConcurrentHashMap<>();
        userConnections = new ConcurrentHashMap<>();
        btnConnection.addItemListener((ItemEvent ev) -> {
            if (ev.getStateChange() == ItemEvent.SELECTED) {
                btnConnection.setText("Stop");
            } else if (ev.getStateChange() == ItemEvent.DESELECTED) {
                btnConnection.setText("Start");
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlServerGUI = new javax.swing.JPanel();
        tabsServer = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        btnConnection = new javax.swing.JToggleButton();
        lblStatus = new javax.swing.JLabel();
        lblStatusOutput = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServerLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        btnListTokens = new javax.swing.JButton();
        btnListCards = new javax.swing.JButton();
        btnSaveTokens = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTokensOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnAllUsers = new javax.swing.JButton();
        txtFindUser = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtUsersOutput = new javax.swing.JTextArea();
        btnSaveUsers = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RMI Tokenizer Server");

        btnConnection.setText("Run");
        btnConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectionActionPerformed(evt);
            }
        });

        lblStatus.setText("Status");

        lblStatusOutput.setText("Offline");

        txtServerLog.setEditable(false);
        txtServerLog.setColumns(20);
        txtServerLog.setRows(5);
        jScrollPane1.setViewportView(txtServerLog);

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(18, 18, 18)
                        .addComponent(lblStatusOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConnection)))
                .addContainerGap())
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnection)
                    .addComponent(lblStatus)
                    .addComponent(lblStatusOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsServer.addTab("Home", pnlHome);

        btnListTokens.setText("Tokens");
        btnListTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListTokensActionPerformed(evt);
            }
        });

        btnListCards.setText("Card IDs");
        btnListCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListCardsActionPerformed(evt);
            }
        });

        btnSaveTokens.setText("Save to File");
        btnSaveTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTokensActionPerformed(evt);
            }
        });

        txtTokensOutput.setEditable(false);
        txtTokensOutput.setColumns(20);
        txtTokensOutput.setRows(5);
        jScrollPane2.setViewportView(txtTokensOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnListTokens)
                        .addGap(26, 26, 26)
                        .addComponent(btnListCards)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(btnSaveTokens)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListTokens)
                    .addComponent(btnListCards)
                    .addComponent(btnSaveTokens))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsServer.addTab("Tokens", jPanel1);

        btnAllUsers.setText("All Users");
        btnAllUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllUsersActionPerformed(evt);
            }
        });

        txtFindUser.setText("Find user");
        txtFindUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFindUserFocusGained(evt);
            }
        });
        txtFindUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFindUserKeyPressed(evt);
            }
        });

        txtUsersOutput.setEditable(false);
        txtUsersOutput.setColumns(20);
        txtUsersOutput.setRows(5);
        jScrollPane3.setViewportView(txtUsersOutput);

        btnSaveUsers.setText("Save to File");
        btnSaveUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFindUser)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSaveUsers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAllUsers)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtFindUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAllUsers)
                    .addComponent(btnSaveUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsServer.addTab("Users", jPanel2);

        javax.swing.GroupLayout pnlServerGUILayout = new javax.swing.GroupLayout(pnlServerGUI);
        pnlServerGUI.setLayout(pnlServerGUILayout);
        pnlServerGUILayout.setHorizontalGroup(
            pnlServerGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerGUILayout.createSequentialGroup()
                .addComponent(tabsServer, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlServerGUILayout.setVerticalGroup(
            pnlServerGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerGUILayout.createSequentialGroup()
                .addComponent(tabsServer, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlServerGUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlServerGUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void startServer(int portNumber) throws RemoteException {
        try {
            // Register services
            registry = LocateRegistry.createRegistry(portNumber);
            IAuthentication authentication = new AuthenticationService();
            registry.rebind(IAuthentication.LOOKUPNAME, authentication);
            this.txtServerLog
                    .append((String.format("%s Service running at %d port...\n", IAuthentication.LOOKUPNAME, portNumber)));
            INotification notification = new NotificationService();
            registry.rebind(INotification.LOOKUPNAME, notification);
            this.txtServerLog
                    .append((String.format("%s Service running at %d port...\n", INotification.LOOKUPNAME, portNumber)));
            ITokenizer tokenizer = new TokenizerService();
            registry.rebind(ITokenizer.LOOKUPNAME, tokenizer);
            this.txtServerLog
                    .append((String.format("%s Service running at %d port...\n", ITokenizer.LOOKUPNAME, portNumber)));
            IRetriever retriever = new RetrieverService();
            registry.rebind(IRetriever.LOOKUPNAME, retriever);
            this.txtServerLog
                    .append((String.format("%s Service running at %d port...\n", IRetriever.LOOKUPNAME, portNumber)));
            IRegister registrar = new RegisterUserService();
            registry.rebind(IRegister.LOOKUPNAME, registrar);
            this.txtServerLog
                    .append((String.format("%s Service running at %d port...", IRegister.LOOKUPNAME, portNumber)));
        } catch (RemoteException e) {
            txtServerLog.append("\n" + e.getMessage());
            throw e;
        }
    }

    private void btnConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectionActionPerformed
        if (btnConnection.getModel().isSelected()) {
            try {
                startServer(1099);
                txtServerLog.append(String.format("\nServer started... \n%tB %<te,  %<tY  %<tT %<Tp%n", new Date()));
                lblStatusOutput.setText("Online");
            } catch (RemoteException ex) {
                txtServerLog.append("\n" + ex.getMessage());
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                btnConnection.setSelected(false);
            }
        } else {
            try {
                UnicastRemoteObject.unexportObject(registry, true);
                lblStatusOutput.setText("Offline");
                txtServerLog.append(String.format("\nServer stopped... \n%tB %<te,  %<tY  %<tT %<Tp%n", new Date()));
            } catch (NoSuchObjectException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnConnectionActionPerformed

    private void btnListTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListTokensActionPerformed
        XMLStream stream = new XMLStream();
        Map<String, String> tokensFromXML = stream.<HashMap<String, String>>readXML(this.tokensXMLLocation);
        List<Token> tokenObjects = new ArrayList<Token>();
        for (Map.Entry<String, String> entry : tokensFromXML.entrySet()) {
            tokenObjects.add(new Token(entry.getKey(), entry.getValue()));
        }
        List<Token> sortedTokens = tokenObjects
                .stream()
                .sorted((a, b) -> (a.getTokenString().compareTo(b.getTokenString())))
                .collect(Collectors.toList());
        txtTokensOutput.setText("");
        txtTokensOutput.append("Tokens\t         <->\t        Card Ids\n");
        for (Token tokenObject : sortedTokens) {
            txtTokensOutput.append(tokenObject.toString() + "\n");
        }
    }//GEN-LAST:event_btnListTokensActionPerformed

    private void btnListCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListCardsActionPerformed
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
        fc.addChoosableFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int i = fc.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.tokensXMLLocation = f.getPath();
            XMLStream stream = new XMLStream();
            Map<String, String> tokensFromXML = stream.<HashMap<String, String>>readXML(this.tokensXMLLocation);
            List<Token> tokenObjects = new ArrayList<Token>();
            for (Map.Entry<String, String> entry : tokensFromXML.entrySet()) {
                tokenObjects.add(new Token(entry.getKey(), entry.getValue()));
            }
            List<Token> sortedTokens = tokenObjects
                    .stream()
                    .sorted((a, b) -> a.getCardId().compareTo(b.getCardId()))
                    .collect(Collectors.toList());
            txtTokensOutput.setText("");
            txtTokensOutput.append("Tokens\t         <->\t        Card Ids\n");
            for (Token tokenObject : sortedTokens) {
                txtTokensOutput.append(tokenObject.toString() + "\n");
            }
        }
    }//GEN-LAST:event_btnListCardsActionPerformed

    private void btnAllUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllUsersActionPerformed
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
        fc.addChoosableFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int i = fc.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.userXMLLocation = f.getPath();
            XMLStream stream = new XMLStream();
            txtUsersOutput.setText("");
            stream.<ArrayList<User>>readXML(this.userXMLLocation)
                    .stream()
                    .sorted((a, b) -> a.getName().compareTo(b.getName())).collect(Collectors.toList())
                    .forEach(u -> txtUsersOutput.append(u.toString() + "\n\n"));
        }
    }//GEN-LAST:event_btnAllUsersActionPerformed

    private void txtFindUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFindUserFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtFindUserFocusGained

    private void txtFindUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFindUserKeyPressed
        String name = txtFindUser.getText();
        XMLStream stream = new XMLStream();
        txtUsersOutput.setText("");
        stream.<ArrayList<User>>readXML(this.userXMLLocation)
                .stream()
                .filter(u -> u.getName().toUpperCase().contains(name.toUpperCase()))
                .sorted((a, b) -> a.getName().compareTo(b.getName()))
                .forEach(u -> txtUsersOutput.append(u.toString() + "\n\n"));
    }//GEN-LAST:event_txtFindUserKeyPressed

    private void btnSaveTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTokensActionPerformed
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.addChoosableFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int i = fc.showSaveDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            String filepath = f.getPath();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filepath + ".txt"))) {
                txtTokensOutput.write(writer);
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveTokensActionPerformed

    private void btnSaveUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUsersActionPerformed
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.addChoosableFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int i = fc.showSaveDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            String filepath = f.getPath();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filepath + ".txt"))) {
                txtUsersOutput.write(writer);
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveUsersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws RemoteException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Server().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllUsers;
    private javax.swing.JToggleButton btnConnection;
    private javax.swing.JButton btnListCards;
    private javax.swing.JButton btnListTokens;
    private javax.swing.JButton btnSaveTokens;
    private javax.swing.JButton btnSaveUsers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusOutput;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlServerGUI;
    private javax.swing.JTabbedPane tabsServer;
    private javax.swing.JTextField txtFindUser;
    private javax.swing.JTextArea txtServerLog;
    private javax.swing.JTextArea txtTokensOutput;
    private javax.swing.JTextArea txtUsersOutput;
    // End of variables declaration//GEN-END:variables

    class AuthenticationService extends UnicastRemoteObject implements IAuthentication {

        public AuthenticationService() throws RemoteException {
        }

        @Override
        public UUID authenticate(String username, String password, INotification alertUser) throws RemoteException {
            XMLStream stream = new XMLStream();
            User logedUser;
            UUID sentCookie = null;
            List<User> usersFromXML = stream.<ArrayList<User>>readXML(userXMLLocation);
            logedUser = usersFromXML
                    .stream()
                    .filter(u -> (u.getName() == null ? username == null : u.getName().equals(username))
                    && (u.getPassword() == null ? password == null : u.getPassword().equals(password)))
                    .findFirst().orElse(null);
            if (logedUser != null) {
                sentCookie = UUID.randomUUID();
                logedUsers.put(sentCookie, logedUser);
                userConnections.put(sentCookie, alertUser);
                alertUser.notify("Login Success");
            } else {
                alertUser.notify("Login Failed");
            }

            return sentCookie;
        }

        @Override
        public void logOut(UUID cookie) throws RemoteException {
            logedUsers.remove(cookie);
            userConnections.get(cookie).notify("Logged out");
        }
    }

    class NotificationService extends UnicastRemoteObject implements INotification {

        public NotificationService() throws RemoteException {
        }

        @Override
        public void notify(String message) throws RemoteException {
            txtServerLog.append(String.format("\n%s\n", message));
        }
    }

    class TokenizerService extends UnicastRemoteObject implements ITokenizer {

        public TokenizerService() throws RemoteException {
        }

        @Override
        public String createToken(String cardId, UUID cookie) throws RemoteException {
            String result = "";
            INotification user = userConnections.get(cookie);
            boolean canTokenize = true == logedUsers.get(cookie).getCanTokenize();
            if (canTokenize) {
                Tokenizer tokenizer = new Tokenizer();
                boolean cardIdCheck = tokenizer.checkCardId(cardId);
                if (cardIdCheck) {
                    result = tokenizer.tokenize(cardId);
                    XMLStream stream = new XMLStream();
                    Map<String, String> tokensFromXML = stream.<HashMap<String, String>>readXML(tokensXMLLocation);
                    tokensFromXML.put(result, cardId);
                    stream.<Map<String, String>>writeXML(tokensFromXML, tokensXMLLocation, WriteMode.UPDATE);
                    user.notify("CardId tokenized.");
                } else {
                    user.notify("Wrong card id number!");
                }
            } else {
                user.notify("Unauthorized to tokenize!");
            }
            return result;
        }
    }

    class RetrieverService extends UnicastRemoteObject implements IRetriever {

        public RetrieverService() throws RemoteException {
        }

        @Override
        public String getCardId(String token, UUID cookie) throws RemoteException {
            String result = "";
            INotification user = userConnections.get(cookie);
            boolean canRetrieve = true == logedUsers.get(cookie).getCanRetrieve();
            if (canRetrieve) {
                XMLStream stream = new XMLStream();
                result = stream.<HashMap<String, String>>readXML(tokensXMLLocation)
                        .get(token);
                if (!result.isEmpty()) {
                    user.notify("Card Id retrieved.");
                } else {
                    user.notify("Card Id not tokenized!");
                }
            } else {
                user.notify("Unauthorized to retrieve!");
            }
            return result;
        }
    }

    class RegisterUserService extends UnicastRemoteObject implements IRegister {

        public RegisterUserService() throws RemoteException {
        }

        @Override
        public void register(String name, String password, boolean canTokenize, boolean canRetrieve, UUID cookie) throws RemoteException {
            XMLStream stream = new XMLStream();
            INotification user = userConnections.get(cookie);
            List<User> usersFromXML = stream.<ArrayList<User>>readXML(userXMLLocation);
            User newUser = new User(name, password, canTokenize, canRetrieve);
            usersFromXML.add(newUser);
            stream.<List<User>>writeXML(usersFromXML, userXMLLocation, WriteMode.UPDATE);
            user.notify("User registered.");
        }
    }
}
